./compiler.elf
Variable { name: a, data: Data { type: Type { name: , type: 1, property: Vec[Variable { name: a, data: Data { type: Type { name: i32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, storage: Storage { type: 2, place: { base_offset: 0 } } }, const_flag: false, static_flag: false, len: -1 }, Variable { name: b, data: Data { type: Type { name: i32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, storage: Storage { type: 2, place: { base_offset: 4 } } }, const_flag: false, static_flag: false, len: -1 }, ], ref_depth: 0, align: 4, size: 8 }, storage: Storage { type: 3, place: { none } } }, const_flag: true, static_flag: true, len: 5 }
Function { name: main, arguments: Vec[Variable { name: arg1, data: Data { type: Type { name: i32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, storage: Storage { type: 1, place: { reg: rax } } }, const_flag: false, static_flag: false, len: -1 }, Variable { name: arg2, data: Data { type: Type { name: i32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, storage: Storage { type: 1, place: { reg: rdx } } }, const_flag: false, static_flag: false, len: -1 }, ], data: Data { type: Type { name: i32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, storage: Storage { type: 1, place: { reg: rax } } }, is_static: false }
AAAAAAAAAAAAAAAAAAAAAA


Generator { filename: anonymous, normal_types: Vec[Type { name: void, type: 0, property: none, ref_depth: 0, align: 1, size: 0 }, Type { name: char, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, Type { name: bool, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, Type { name: i8, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, Type { name: u8, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, Type { name: i16, type: 0, property: none, ref_depth: 0, align: 2, size: 2 }, Type { name: u16, type: 0, property: none, ref_depth: 0, align: 2, size: 2 }, Type { name: i32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, Type { name: u32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, Type { name: i64, type: 0, property: none, ref_depth: 0, align: 8, size: 8 }, Type { name: u64, type: 0, property: none, ref_depth: 0, align: 8, size: 8 }, Type { name: f32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, Type { name: f64, type: 0, property: none, ref_depth: 0, align: 8, size: 8 }, Type { name: ParserMsg, type: 1, property: Vec[Variable { name: line, data: Data { type: Type { name: u32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, storage: Storage { type: 2, place: { base_offset: 0 } } }, const_flag: false, static_flag: false, len: -1 }, Variable { name: msg, data: Data { type: Type { name: char, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, storage: Storage { type: 2, place: { base_offset: 4 } } }, const_flag: false, static_flag: false, len: 256 }, ], ref_depth: 0, align: 4, size: 260 }, Type { name: MyS, type: 1, property: Vec[Variable { name: flag, data: Data { type: Type { name: bool, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, storage: Storage { type: 2, place: { base_offset: 0 } } }, const_flag: false, static_flag: false, len: -1 }, Variable { name: msg, data: Data { type: Type { name: ParserMsg, type: 1, property: Vec[Variable { name: line, data: Data { type: Type { name: u32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, storage: Storage { type: 2, place: { base_offset: 0 } } }, const_flag: false, static_flag: false, len: -1 }, Variable { name: msg, data: Data { type: Type { name: char, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, storage: Storage { type: 2, place: { base_offset: 4 } } }, const_flag: false, static_flag: false, len: 256 }, ], ref_depth: 0, align: 4, size: 260 }, storage: Storage { type: 2, place: { base_offset: 4 } } }, const_flag: false, static_flag: false, len: -1 }, ], ref_depth: 0, align: 4, size: 264 }, ], struct_types: Vec[Type { name: MyStruct, type: 1, property: Vec[Variable { name: flag, data: Data { type: Type { name: bool, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, storage: Storage { type: 2, place: { base_offset: 0 } } }, const_flag: false, static_flag: false, len: -1 }, Variable { name: msg, data: Data { type: Type { name: ParserMsg, type: 1, property: Vec[Variable { name: line, data: Data { type: Type { name: u32, type: 0, property: none, ref_depth: 0, align: 4, size: 4 }, storage: Storage { type: 2, place: { base_offset: 0 } } }, const_flag: false, static_flag: false, len: -1 }, Variable { name: msg, data: Data { type: Type { name: char, type: 0, property: none, ref_depth: 0, align: 1, size: 1 }, storage: Storage { type: 2, place: { base_offset: 4 } } }, const_flag: false, static_flag: false, len: 256 }, ], ref_depth: 0, align: 4, size: 260 }, storage: Storage { type: 2, place: { base_offset: 4 } } }, const_flag: false, static_flag: false, len: -1 }, ], ref_depth: 0, align: 4, size: 264 }, ], enum_types: Vec[], union_types: Vec[], functions: Vec[], global_variables: Vec[], code: { text: , data:  }, errors: Vec[] }

BBBBBBBBBBBBBBBBBBBBB

AstTree { node: AstNode { type: 0, body: .operator: { operator: Operator { name: -, left_arg: true, right_arg: true, priority: 12}, left: AstNode { type: 0, body: .operator: { operator: Operator { name: +, left_arg: true, right_arg: true, priority: 12}, left: AstNode { type: 0, body: .operator: { operator: Operator { name: +, left_arg: true, right_arg: true, priority: 12}, left: AstNode { type: 1, body: .imm: ImmValue { type: 0, body: .number: 2 } }, right: AstNode { type: 0, body: .operator: { operator: Operator { name: ++, left_arg: true, right_arg: false, priority: 16}, left: AstNode { type: 1, body: .imm: ImmValue { type: 0, body: .number: 3 } }, right: AstNode { type: 1, body: .imm: ImmValue { type: 0, body: .number:  } } } } } }, right: AstNode { type: 0, body: .operator: { operator: Operator { name: /, left_arg: true, right_arg: true, priority: 13}, left: AstNode { type: 0, body: .operator: { operator: Operator { name: *, left_arg: true, right_arg: true, priority: 13}, left: AstNode { type: 1, body: .imm: ImmValue { type: 0, body: .number: 3 } }, right: AstNode { type: 1, body: .imm: ImmValue { type: 0, body: .number: 5 } } } }, right: AstNode { type: 1, body: .imm: ImmValue { type: 0, body: .number: 7 } } } } } }, right: AstNode { type: 1, body: .imm: ImmValue { type: 0, body: .number: 8 } } } } }

